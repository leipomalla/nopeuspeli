{"version":3,"sources":["Circle/Circle.js","GameOver/GameOver.js","App.js","index.js"],"names":["Circle","props","className","active","onClick","click","style","backgroundColor","buttonColor","closeHandler","window","location","reload","GameOver","id","score","getRandomInt","min","max","Math","floor","random","App","state","current","showGameOver","rounds","pace","timer","undefined","next","endHandler","nextActive","setState","setTimeout","console","log","clickHandler","crlId","startHandler","clearTimeout","color","this","Component","ReactDOM","render","document","getElementById"],"mappings":"iTAceA,G,YAXA,SAAAC,GACb,OACE,yBACEC,UAAW,UAAYD,EAAME,OAAS,UAAY,IAClDC,QAASH,EAAMI,MACfC,MAAO,CACLC,gBAAiBN,EAAME,OAASF,EAAME,OAASF,EAAMO,iBCNvDC,G,MAAe,WACnBC,OAAOC,SAASC,WAcHC,EAXE,SAAAZ,GACf,OACE,yBAAKa,GAAG,UACN,yBAAKZ,UAAU,eACb,uBAAGY,GAAG,YAAN,qCAAoDb,EAAMc,MAA1D,KACA,4BAAQX,QAASK,GAAjB,YCPFO,EAAe,SAACC,EAAKC,GACzB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,GAoGxCK,E,2MAhGbC,MAAQ,CACNR,MAAO,EACPS,QAAS,EACTC,cAAc,EACdC,OAAQ,G,EAGVC,KAAO,K,EACPC,WAAQC,E,EAERC,KAAO,WACL,GAAI,EAAKP,MAAMG,QAAU,EACvB,EAAKK,iBADP,CAIA,IAAIC,OAAaH,EAEjB,GACEG,EAAahB,EAAa,EAAG,SACtBgB,IAAe,EAAKT,MAAMC,SAEnC,EAAKS,SAAS,CACZT,QAASQ,IAGX,EAAKL,MAAQ,IACb,EAAKC,MAAQM,WAAW,EAAKJ,KAAM,EAAKH,MACxC,EAAKM,SAAS,CAAEP,OAAQ,EAAKH,MAAMG,OAAS,IAI5CS,QAAQC,IAAI,EAAKb,MAAMG,U,EAGzBW,aAAe,SAAAC,GACbH,QAAQC,IAAI,OAAQE,GAEhB,EAAKf,MAAMC,UAAYc,GAK3B,EAAKL,SAAS,CACZlB,MAAO,EAAKQ,MAAMR,MAAQ,IAG5B,EAAKkB,SAAS,CACZP,OAAQ,KATR,EAAKK,c,EAaTQ,aAAe,WACb,EAAKT,Q,EAGPC,WAAa,WACXS,aAAa,EAAKZ,OAClB,EAAKK,SAAS,CAAER,cAAc,K,wEAGtB,IAAD,OACP,OACE,6BACE,0CACA,uBAAGnB,MAAO,CAAEmC,MAAO,UAAnB,kBAA8CC,KAAKnB,MAAMR,OACzD,kBAAC,EAAD,CACEP,YAAY,UACZL,OAA+B,IAAvBuC,KAAKnB,MAAMC,QACnBnB,MAAO,kBAAM,EAAKgC,aAAa,MAEjC,kBAAC,EAAD,CACE7B,YAAY,UACZL,OAA+B,IAAvBuC,KAAKnB,MAAMC,QACnBnB,MAAO,kBAAM,EAAKgC,aAAa,MAEjC,kBAAC,EAAD,CACE7B,YAAY,UACZL,OAA+B,IAAvBuC,KAAKnB,MAAMC,QACnBnB,MAAO,kBAAM,EAAKgC,aAAa,MAEjC,kBAAC,EAAD,CACE7B,YAAY,UACZL,OAA+B,IAAvBuC,KAAKnB,MAAMC,QACnBnB,MAAO,kBAAM,EAAKgC,aAAa,MAEjC,6BACE,4BAAQjC,QAASsC,KAAKH,cAAtB,cACA,4BAAQnC,QAASsC,KAAKX,YAAtB,aAGDW,KAAKnB,MAAME,cAAgB,kBAAC,EAAD,CAAUV,MAAO2B,KAAKnB,MAAMR,a,GA3F9C4B,aCJlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.93862b15.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Circle.css\";\r\n\r\nconst Circle = props => {\r\n  return (\r\n    <div\r\n      className={\"Circle\" + (props.active ? \" active\" : \"\")}\r\n      onClick={props.click}\r\n      style={{\r\n        backgroundColor: props.active ? props.active : props.buttonColor\r\n      }}\r\n    ></div>\r\n  );\r\n};\r\nexport default Circle;\r\n","import React from \"react\";\r\nimport \"./GameOver.css\";\r\n\r\nconst closeHandler = () => {\r\n  window.location.reload();\r\n};\r\n\r\nconst GameOver = props => {\r\n  return (\r\n    <div id=\"result\">\r\n      <div className=\"gameoverbox\">\r\n        <p id=\"gameover\"> Game over! Your final score was: {props.score} </p>\r\n        <button onClick={closeHandler}>Close</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameOver;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Circle from \"./Circle/Circle\";\nimport GameOver from \"./GameOver/GameOver\";\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nclass App extends Component {\n  state = {\n    score: 0,\n    current: 0,\n    showGameOver: false,\n    rounds: 0\n  };\n\n  pace = 1500; /* koska classbased, ei tarvitse olla let/var/const*/\n  timer = undefined;\n\n  next = () => {\n    if (this.state.rounds >= 5) {\n      this.endHandler();\n      return;\n    }\n    let nextActive = undefined;\n\n    do {\n      nextActive = getRandomInt(1, 4);\n    } while (nextActive === this.state.current);\n\n    this.setState({\n      current: nextActive\n    });\n\n    this.pace *= 0.95;\n    this.timer = setTimeout(this.next, this.pace);\n    this.setState({ rounds: this.state.rounds + 1 });\n\n    /* voi käyttää sulkeita funktiota kutsuessa, ei oo pakko*/\n\n    console.log(this.state.rounds);\n  };\n\n  clickHandler = crlId => {\n    console.log(\"wow!\", crlId);\n\n    if (this.state.current !== crlId) {\n      this.endHandler();\n      return;\n    }\n\n    this.setState({\n      score: this.state.score + 1\n    });\n\n    this.setState({\n      rounds: 0\n    });\n  };\n\n  startHandler = () => {\n    this.next();\n  };\n\n  endHandler = () => {\n    clearTimeout(this.timer);\n    this.setState({ showGameOver: true });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Speed game</h1>\n        <p style={{ color: \"white\" }}>Your score is: {this.state.score}</p>\n        <Circle\n          buttonColor=\"#d52468\"\n          active={this.state.current === 1}\n          click={() => this.clickHandler(1)}\n        />\n        <Circle\n          buttonColor=\"#fdf04c\"\n          active={this.state.current === 2}\n          click={() => this.clickHandler(2)}\n        />\n        <Circle\n          buttonColor=\"#1a9fa7\"\n          active={this.state.current === 3}\n          click={() => this.clickHandler(3)}\n        />\n        <Circle\n          buttonColor=\"#fd8048\"\n          active={this.state.current === 4}\n          click={() => this.clickHandler(4)}\n        />\n        <div>\n          <button onClick={this.startHandler}>Start game</button>\n          <button onClick={this.endHandler}>End game</button>\n        </div>\n\n        {this.state.showGameOver && <GameOver score={this.state.score} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}